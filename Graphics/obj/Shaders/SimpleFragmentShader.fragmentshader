#version 330 core

in vec3 fragColor;

uniform vec3 ambientLight;
out vec3 color;

in vec2 TexCoord;
uniform sampler2D myTextureSampler;

in vec3 position_worldspace;
in vec3 normal_worldspace;
in vec3 viewSpace;

uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec2 data;
vec3 fog_color = vec3(1f,1f,1f);
vec3 fogFactor;
float fog_den = 0.0001;




void main()
{
	


	     vec3 Il = vec3(1,1,1);
	vec3 textureColor = texture( myTextureSampler, TexCoord ).rgb;

	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	
	vec3 diffuseLight = vec3(brightness,brightness,brightness);
	diffuseLight = Il*clamp(diffuseLight,0,1);
	
	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	//vec3 cam_vec=normalize(EyePosition_worldspace-normal_worldspace);

	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	
	float specularity = dot(reflectedLightVector,eyeDirectionVector);

	float specularExponent = data.y;
	
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = Il*clamp(specularLight,0,1);


	

	float d = abs(distance(position_worldspace,LightPosition_worldspace));
	float r = data.x;
	float att = 1 - (d/r);
	if ( att < 0)
		att = 0;
	color = ambientLight + (diffuseLight + specularLight)*att;
	color = color*textureColor;
	
	
	float dist = length(viewSpace);
	fogFactor =vec3(1/exp(dist*fog_den));
	fogFactor = clamp( fogFactor, 0.0, 1.0 );
	color = mix(fog_color, color, fogFactor);
	
}
